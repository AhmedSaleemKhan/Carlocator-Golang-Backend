package config

import (
	"log"
	"os"

	"github.com/spf13/viper"
)

type Config struct {
	Host       string   `mapstructure:"HOST"`
	Port       int      `mapstructure:"DBPORT"`
	DbName     string   `mapstructure:"POSTGRES_DB"`
	DbUser     string   `mapstructure:"POSTGRES_USER"`
	DbPassword string   `mapstructure:"POSTGRES_PASSWORD"`
	SslMode    string   `mapstructure:"SSL_MODE"`
	NoClean    bool     // Don't clean comments and blank lines from output
	NoHeader   bool     // Don't write the "generated by" header comment
	PGDump     string   // pg_dump executable name (defaults to "pg_dump")
	Schemas    []string // Schemas to dump (default is to dump all schemas)
	Writer     *os.File // Writer to write schema dump to (defaults to stdout)
}

func LoadConfig() (config Config, err error) {
	viper.AddConfigPath(".")
	// export ENV=production // To load the production env
	if os.Getenv("ENV") == "production" {
		viper.SetConfigName(".env.production")
	} else if os.Getenv("ENV") == "staging" {
		viper.SetConfigName(".env.staging")
	} else if os.Getenv("ENV") == "dev" {
		viper.SetConfigName(".env.dev")
	} else {
		viper.SetConfigName(".env.local")
	}
	viper.SetConfigType("env")
	err = viper.ReadInConfig()
	viper.AutomaticEnv()
	// viper.BindEnv()
	if err != nil {
		log.Fatalf(err.Error())
		return
	}
	err = viper.Unmarshal(&config)
	return
}
