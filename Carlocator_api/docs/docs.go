// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    securityDefinitions:{
		Bearer:{       
		  type: apiKey,
		  in: header,
		  name: Authorization,
		  },
		  },
    "paths": {
        "/dealer/signup": {
			post: {
				summary: "Sign up as dealer",
				produces: [
					application/json
				  ],
				  "tags":[
					Dealer-Authentication
				  ],
			parameters: [
					{
				name: Signup,
				in: body,   
				description: Register new dealer,
				
				"properties":{
					email:{
						type:string,
						format:json
					},
					username:{
						type:string,
						format:json
					},
					password:{
						type:string,
						format:json
					}
			},
			},
			],
				responses: {
					200: {
						description: Status, OK
					}
				}
			}
		},

		"/dealer/verifyotp": {
			post: {
				summary: "verfiy otp",
				produces: [
					application/json
				  ],
				  "tags":[
					Dealer-Authentication
				  ],
			parameters: [
					{
				name: verfiyotp,
				in: body,   
				description: verfiy otp,
				
				"properties":{
					email:{
						type:string,
						format:json
					},
					otp:{
						type:string,
						format:json
					}
			},
			},
			],
				responses: {
					200: {
						description: Status, OK
					}
				}
			}
		},

		"/dealer/signin": {
			post: {
				summary: "dealer or staff signin",
				produces: [
					application/json
				  ],
				  "tags":[
					Dealer-Authentication
				  ],
			parameters: [
					{
				name: singin,
				in: body,   
				description: login ,
				
				"properties":{
					email:{
						type:string,
						format:json
					},
					password:{
						type:string,
						format:json
					}
			},
			},
			],
				responses: {
					200: {
						description: Status, OK
					}
				}
			}
		},

		"/dealer/forgotpassword": {
			post: {
				summary: "dealer or staff forgot password for login",
				produces: [
					application/json
				  ],
				  "tags":[
					Dealer-Authentication
				  ],
			parameters: [
					{
				name: forgotpassword,
				in: body,   
				description: forgotpassword,
				
				"properties":{
					email:{
						type:string,
						format:json
					}
			},
			},
			],
				responses: {
					200: {
						description: Status, OK
					}
				}
			}
		},

		"/dealer/forgotconfirm": {
			post: {
				summary: "dealer or staff confirm password for login",
				produces: [
					application/json
				  ],
				  "tags":[
					Dealer-Authentication
				  ],
			parameters: [
					{
				name: confirmpassword,
				in: body,   
				description: forgotconfirmpassword,
				
				"properties":{
					email:{
						type:string,
						format:json
					},
					otp:{
						type:string,
						format:json
					},
					password:{
						type:string,
						format:json
					}
					
				
			},
			},
			],
				responses: {
					200: {
						description: Status, OK
					}
				}
			}
		},

		"/dealer/signout": {
			post: {
				summary: "dealer or staff signout",
				produces: [
					application/json
				  ],
				  "tags":[
					Dealer-Authentication
				  ],
			parameters: [
					{
				name: signout,
				in: body,   
				description: signout,
				
				"properties":{
					token:{
						type:string,
						format:json
					}
			},
			},
			],
				responses: {
					200: {
						description: Status, OK
					}
				}
			}
		},

		"/dealer/staff/signup": {
			post: {
				summary: "dealer add staff singup",
				produces: [
					application/json
				  ],
				  "tags":[
					staff-Authentication
				  ],
				  security: [{
					Bearer: []
				}],

			parameters: [
					{
				name: StaffSignup,
				in: body,   
				description: staff-signup,
				
				"properties":{
				    email_work:{
						type:string,
						format:json
					},
					first_name:{
						type:string,
						format:json
					},
					last_name:{
						type:string,
						format:json
					},
				    username:{
						type:string,
						format:json
					},
					password:{
						type:string,
						format:json
					},
					phone_number:{
						type:string,
						format:json
					},
					email_personal:{
						type:string,
						format:json
					},
					max_key_staff:{
						type:int64,
						format:json
					},
					max_role_keys:{
						type:int64,
						format:json
					},
					multi_login:{
						type:bool,
						format:json
					},
					staff_role_name:{
						type:string,
						format:json
					},
					staff_info:{
						type:string,
						format:json
					}
			},
			},
			],
				responses: {
					200: {
						description: Status, OK
					}
				}
			}
		},
		
		"/vehicle/add": {
			post: {
				summary: "add new vehicle",
				produces: [
					application/json
				  ],
				  "tags":[
					vehicle
				  ],
				  security: [{
					Bearer: []
				}],
			parameters: [
					{
				name: add_new_vehicle,
				in: body,   
				description:add new vehicle ,
				
				"properties":{
					veh_name:{
						type:string,
						format:json
					},
					stock_no:{
						type:int64,
						format:json
					},
					vin_no:{
						type:int64,
						format:json
					},
					lic_plate:{
						type:string,
						format:json
					},
					brand_make:{
						type:string,
						format:json
					},
					model:{
						type:string,
						format:json
					},
					manufacture_year:{
						type:string,
						format:json
					},
					veh_color:{
						type:string,
						format:json
					},
					transmission_style:{
						type:string,
						format:json
					}
			},
			},
			],
				responses: {
					200: {
						description: Status, OK
					}
				}
			}
		},

		"/vehicle/multiple": {
			post: {
				summary: "add multiple vehicles",
				produces: [
					application/json
				  ],
				  "tags":[
					vehicle
				  ],
				  security: [{
					Bearer: []
				}],
			parameters: [
					{
				name: add_muliple_vehicles,
				in: body,   
				description:add multiple vehicle ,
				type:{},

				"properties":{
					
					veh_name:{
						type:string,
						format:json
					},
					stock_no:{
						type:int64,
						format:json
					},
					vin_no:{
						type:int64,
						format:json
					},
					lic_plate:{
						type:string,
						format:json
					},
					brand_make:{
						type:string,
						format:json
					},
					model:{
						type:string,
						format:json
					},
					manufacture_year:{
						type:string,
						format:json
					},
					veh_color:{
						type:string,
						format:json
					},
					transmission_style:{
						type:string,
						format:json
					}
			},
			},
			],
				responses: {
					200: {
						description: Status, OK
					}
				}
			}
		},

		"/vehicle/": {
			get: {
				summary: "get dealer vehicles",
				produces: [
					application/json
				  ],
				  "tags":[
					vehicle
				  ],
				  security: [{
					Bearer: []
				}],
			parameters: [
					{
				name: get_dealer_vehicles,   
				description:get dealer vehicles ,

				"properties":{},
			},
			],
				responses: {
					200: {
						description: Status, OK
					}
				}
			}
		},

		"/vehicle/keys/:veh_id": {
			get: {
				summary: "get vehicle keys",
				produces: [
					application/json
				  ],
				  "tags":[
					vehicle
				  ],
				  security: [{
					Bearer: []
				}],
			parameters: [
					{
				name: veh_id,
				in: path,   
				required:true,
				description:get vehicle keys,
			},
			],
				responses: {
					200: {
						description: Status, OK
					}
				}
			}
		},


    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "2.0",
	Host:             "localhost:5000",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "carlocator",
	Description:      "carlocator api's",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  doc,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
